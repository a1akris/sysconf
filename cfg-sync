#!/usr/bin/env python3

import os,shutil
from datetime import datetime

def process_file(paths_file):
    pairs = []
    with open(paths_file, 'r') as f:
        for (ix, line) in enumerate(f.readlines()):
            if ix == 0 or line.startswith('!'):
                continue

            source,dest = line.split()
            assert source.startswith("./"), "source path must start with ./"
            pairs.append((source, os.path.expanduser(dest)))

    return pairs


def make_backup(path):
    path = path.rstrip('/')
    now = datetime.now()
    time_suffix = now.strftime("%Y%m%d_%H%M%S")
    name = f"{path}_{time_suffix}backup"

    return shutil.make_archive(name, "gztar", base_dir=path)


def validate_path(*paths):
    for path in paths:
        if not os.path.exists(path):
            raise Exception(f"Path {path} doesn't exist")


def rm(path):
    if os.path.isfile(path):
        os.remove(path)
    else:
        shutil.rmtree(path)


def cp(source, dest):
    if os.path.isfile(source):
        shutil.copy2(source, dest)
    else:
        shutil.copytree(source, dest)


def collect(paths_file):
    paths = process_file(paths_file)
    do(map(lambda x: (x[1], x[0]), paths))


def distribute(paths_file, risky=False):
    answer = input('Are you sure that you want to distribute? This will overwrite existing configuration on the system.\nType "YES!" to confirm: ')

    if answer == "YES!":
        paths = process_file(paths_file)
        do(paths, keep_backup=not risky)
    else:
        print("Aborted")


def do(paths, keep_backup=False):
    for source,dest in paths:
        backup_path = None
        validate_path(source)

        if os.path.exists(dest):
            backup_path = make_backup(dest)
            rm(dest)

        cp(source, dest)

        if backup_path and not keep_backup:
            rm(backup_path)

    print("Done!")


def check_git():
    ret = os.system("git branch")
    if ret != 0:
        raise Exception("This tool is unsafe, make sure you're in the GIT repo")

import argparse

parser = argparse.ArgumentParser(prog="cfg-sync", description='Syncrhonize config files', usage='%(prog)s {collect | distribute} <paths_file>')
parser.add_argument('operation', type=str, help='collect | distribute')
parser.add_argument('paths_file', type=str, help='file with paths')
parser.add_argument('--risky', action='store_true', help='Do not keep backups for changed configs on the system')

args = parser.parse_args()

try:
    check_git()

    if args.operation == "collect":
        collect(args.paths_file)
    elif args.operation == "distribute":
        distribute(args.paths_file, args.risky)
    else:
        parser.print_help()
except Exception as e:
    print(f"Error: {e}")
